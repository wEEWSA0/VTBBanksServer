// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VTBBanksServer.Data;

#nullable disable

namespace VTBBanksServer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231015012124_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VTBBanksServer.Models.BankOffice", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Distance")
                        .HasColumnType("integer");

                    b.Property<string>("HasRamp")
                        .HasColumnType("text");

                    b.Property<bool?>("Kep")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MetroStation")
                        .HasColumnType("text");

                    b.Property<bool>("MyBranch")
                        .HasColumnType("boolean");

                    b.Property<string>("OfficeType")
                        .HasColumnType("text");

                    b.Property<string>("Rko")
                        .HasColumnType("text");

                    b.Property<string>("SalePointFormat")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SuoAvailability")
                        .HasColumnType("text");

                    b.HasKey("Id", "Name");

                    b.ToTable("BankOffices");
                });

            modelBuilder.Entity("VTBBanksServer.Models.BankOfficeWorkload", b =>
                {
                    b.Property<long>("BankOfficeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BankOfficeName")
                        .HasColumnType("text");

                    b.Property<int>("OperationsCount")
                        .HasColumnType("integer");

                    b.Property<int>("PeopleLeft")
                        .HasColumnType("integer");

                    b.Property<int>("PeopleVisited")
                        .HasColumnType("integer");

                    b.HasKey("BankOfficeId", "Date");

                    b.HasIndex("BankOfficeId", "BankOfficeName");

                    b.ToTable("BankOfficeWorkloads");
                });

            modelBuilder.Entity("VTBBanksServer.Models.CashMachine", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<bool>("AllDay")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Id", "Address");

                    b.ToTable("CashMachines");
                });

            modelBuilder.Entity("VTBBanksServer.Models.CashMachineAmenities", b =>
                {
                    b.Property<long>("CashMachineId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Activity")
                        .HasColumnType("boolean");

                    b.Property<bool>("Capability")
                        .HasColumnType("boolean");

                    b.Property<string>("CashMachineAddress")
                        .HasColumnType("text");

                    b.HasKey("CashMachineId", "Name");

                    b.HasIndex("CashMachineId", "CashMachineAddress");

                    b.ToTable("CashMachineAmenities");
                });

            modelBuilder.Entity("VTBBanksServer.Models.CashMachineWorkload", b =>
                {
                    b.Property<long>("CashMachineId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CashMachineAddress")
                        .HasColumnType("text");

                    b.Property<int>("OperationsCount")
                        .HasColumnType("integer");

                    b.Property<int>("PeopleLeft")
                        .HasColumnType("integer");

                    b.Property<int>("PeopleVisited")
                        .HasColumnType("integer");

                    b.HasKey("CashMachineId", "Date");

                    b.HasIndex("CashMachineId", "CashMachineAddress");

                    b.ToTable("CashMachineWorkloads");
                });

            modelBuilder.Entity("VTBBanksServer.Models.FavouriteBankOffice", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<long>("BankOfficeId")
                        .HasColumnType("bigint");

                    b.Property<string>("BankOfficeName")
                        .HasColumnType("text");

                    b.HasKey("UserId", "BankOfficeId");

                    b.HasIndex("BankOfficeId", "BankOfficeName");

                    b.ToTable("FavouriteBankOffices");
                });

            modelBuilder.Entity("VTBBanksServer.Models.FavouriteCashMachine", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<long>("CashMachineId")
                        .HasColumnType("bigint");

                    b.Property<string>("CashMachineAddress")
                        .HasColumnType("text");

                    b.HasKey("UserId", "CashMachineId");

                    b.HasIndex("CashMachineId", "CashMachineAddress");

                    b.ToTable("FavouriteCashMachines");
                });

            modelBuilder.Entity("VTBBanksServer.Models.OpenHours", b =>
                {
                    b.Property<long>("SalePointId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("CloseHour")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("OpenHour")
                        .HasColumnType("time without time zone");

                    b.Property<string>("SalePointName")
                        .HasColumnType("text");

                    b.HasKey("SalePointId", "Type", "Day");

                    b.HasIndex("SalePointId", "SalePointName");

                    b.ToTable("OpenHours");
                });

            modelBuilder.Entity("VTBBanksServer.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("VTBBanksServer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("VTBBanksServer.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("VTBBanksServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("VTBBanksServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("VTBBanksServer.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VTBBanksServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("VTBBanksServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VTBBanksServer.Models.BankOfficeWorkload", b =>
                {
                    b.HasOne("VTBBanksServer.Models.BankOffice", "BankOffice")
                        .WithMany()
                        .HasForeignKey("BankOfficeId", "BankOfficeName");

                    b.Navigation("BankOffice");
                });

            modelBuilder.Entity("VTBBanksServer.Models.CashMachineAmenities", b =>
                {
                    b.HasOne("VTBBanksServer.Models.CashMachine", null)
                        .WithMany("Amenities")
                        .HasForeignKey("CashMachineId", "CashMachineAddress");
                });

            modelBuilder.Entity("VTBBanksServer.Models.CashMachineWorkload", b =>
                {
                    b.HasOne("VTBBanksServer.Models.CashMachine", "CashMachine")
                        .WithMany()
                        .HasForeignKey("CashMachineId", "CashMachineAddress");

                    b.Navigation("CashMachine");
                });

            modelBuilder.Entity("VTBBanksServer.Models.FavouriteBankOffice", b =>
                {
                    b.HasOne("VTBBanksServer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VTBBanksServer.Models.BankOffice", "BankOffice")
                        .WithMany()
                        .HasForeignKey("BankOfficeId", "BankOfficeName");

                    b.Navigation("BankOffice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VTBBanksServer.Models.FavouriteCashMachine", b =>
                {
                    b.HasOne("VTBBanksServer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VTBBanksServer.Models.CashMachine", "CashMachine")
                        .WithMany()
                        .HasForeignKey("CashMachineId", "CashMachineAddress");

                    b.Navigation("CashMachine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VTBBanksServer.Models.OpenHours", b =>
                {
                    b.HasOne("VTBBanksServer.Models.BankOffice", "SalePoint")
                        .WithMany("OpenHours")
                        .HasForeignKey("SalePointId", "SalePointName");

                    b.Navigation("SalePoint");
                });

            modelBuilder.Entity("VTBBanksServer.Models.BankOffice", b =>
                {
                    b.Navigation("OpenHours");
                });

            modelBuilder.Entity("VTBBanksServer.Models.CashMachine", b =>
                {
                    b.Navigation("Amenities");
                });
#pragma warning restore 612, 618
        }
    }
}
